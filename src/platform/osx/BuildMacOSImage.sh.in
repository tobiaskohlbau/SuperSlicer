#!/bin/bash

#
# This script builds the SuperSlicer appimage.
#
# Original script from SuperSlicer by supermerill https://github.com/supermerill/SuperSlicer
#
# Change log:
#
# 20 Nov 2023, wschadow, branding and minor changes
# 10 Mar 2024, wschadow, added options
#

export OS_NAME="macOS"
VERSION_NUMBER=""
while getopts ":ixavh" opt; do
  case ${opt} in
    i )
        export BUILD_IMAGE="1"
        ;;
    x )
        export OS_NAME="macOS-intel"
        ;;
    a )
        export OS_NAME="macOS-arm"
        ;;
    v )
        export VERSION_NUMBER="-@SLIC3R_VERSION_FULL@"
        ;;
    h ) echo "Usage: ./BuildLinuxImage.sh [-i][-a][-h]"
        echo "   -i: generate Appimage (optional)"
        echo "   -x: set output name for intel (optional)"
        echo "   -a: set output name for arm (optional)"
        echo "   -h: help"
        exit 0
        ;;
  esac
done

    echo -e "\n[8/9] Generating MacOS app..."
#    {
        # update Info.plist
        pushd src
        sed "s/+UNKNOWN/_$(date '+%F')/" Info.plist >Info.date.plist
        popd

        # create directory and copy into it
        if [ -d "pack" ]
        then
            rm -rf pack/*
        fi
        mkdir pack
        mkdir pack/@SLIC3R_APP_KEY@
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/_CodeSignature
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Frameworks
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS

        # copy Resources
        cp -Rf ../resources pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources
        cp pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/icons/@SLIC3R_APP_KEY@.icns pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/resources/@SLIC3R_APP_KEY@.icns
        cp src/Info.date.plist pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Info.plist
        echo -n -e 'APPL????\x0a' > PkgInfo
        cp PkgInfo pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/PkgInfo
        # remove unneeded po from resources
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.po" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.pot" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.ini" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.py" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.md" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.txt" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*database.mo" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "Slic3r.mo" -type f -delete

        # copy bin and do not let it lower case
        cp -f bin/@SLIC3R_APP_CMD@ pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
        chmod u+x pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
        cp /usr/local/opt/zstd/lib/libzstd.1.dylib pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/libzstd.1.dylib

#     } &> $ROOT/Build.log # Capture all command output
    echo -e "\n ... done\n"

if [[ -n "$BUILD_IMAGE" ]]
then
echo -e "\n[9/9] Creating .tgz and DMG Image for distribution..."
  {

    tar -czvf @SLIC3R_APP_KEY@${VERSION_NUMBER}-$OS_NAME.tgz pack/@SLIC3R_APP_KEY@
    #tar -czvf @SLIC3R_APP_KEY@-@SLIC3R_VERSION_FULL@-macOS.tgz pack/@SLIC3R_APP_KEY@

    # create dmg
    hdiutil create -ov -fs HFS+ -volname "@SLIC3R_APP_KEY@" -srcfolder "pack/@SLIC3R_APP_KEY@" temp.dmg
    hdiutil convert temp.dmg -format UDZO -o @SLIC3R_APP_KEY@${VERSION_NUMBER}-$OS_NAME.dmg
    rm -f temp.dmg
    popd
  } &> $ROOT/Build.log # Capture all command output

  # check if evrything went well
  if [ -e $OS_NAME.dmg ]; then
      echo -e "\n ... done\n"
  else
      # something went wrong, publish log
      echo -e "\n ... fail\n"
      cat $ROOT/Build.log
  fi
fi

if [[ -e $OS_NAME.dmg ]]
then

else
echo -e "\n[9/9 (bis)] Creating .tgz and DMG Image for distribution... again"
  {
    echo killing...; sudo pkill -9 XProtect >/dev/null || true;
    echo waiting...; while pgrep XProtect; do sleep 3; done;

    tar -czvf @SLIC3R_APP_KEY@${VERSION_NUMBER}-$OS_NAME.tgz pack/@SLIC3R_APP_KEY@
    #tar -czvf @SLIC3R_APP_KEY@-@SLIC3R_VERSION_FULL@-macOS.tgz pack/@SLIC3R_APP_KEY@

    # create dmg
    hdiutil create -ov -fs HFS+ -volname "@SLIC3R_APP_KEY@" -srcfolder "pack/@SLIC3R_APP_KEY@" temp.dmg
    hdiutil convert temp.dmg -format UDZO -o @SLIC3R_APP_KEY@${VERSION_NUMBER}-$OS_NAME.dmg
    rm -f temp.dmg
    popd
  } &> $ROOT/Build.log # Capture all command output

  # check if evrything went well
  if [ -e $OS_NAME.dmg ]; then
      echo -e "\n ... done\n"
  else
      # something went wrong, publish log
      echo -e "\n ... fail\n"
      cat $ROOT/Build.log
  fi
fi

